import re,zlib,cv2
from scapy.all import *

picture_directry="pictures"
faces_directry="faces"
pcap_file="bhp.pcap"

def http_assembler(pcap_file):
    carved_images=0
    faces_detected=0

    a=rdpcap(pcap_file)
    sessions=a.session()

    for session in sessions:
        http_payload=''
        for packet in sessions[session]:
            try:
                if packet[TCP].dport==80 or packet[TCP].sport==80:
                    http_payload+=str(packet[TCP].payload)
            except:
                pass
        headers=get_http_headers(http_payload)
        
        if headers is None:
            continue
        image,image_type =extract_image(headers.http_payload)

        if image is not None and image_type is not None:
            file_names="{}-pic_carver_{}.{}".format(pcap_file,carved_images,image_type)

        with open("{}/{}".format(pictures_directry,file_name),"wb") as w:
            w.write(image)
        carved_images+=1

        try:
            result=face_detect("{}/{}".format(pictures_directry,file_name),file_name)

            if result is True:
                face_detect+=1
        except:
            pass
    return carved_images,faces_detected

carved_images,faces_detected=http_assembler(pcap_file)
print("Extracted:{} images".format(carved_images))
print("Detected:{} faces".format(faces_detected))
